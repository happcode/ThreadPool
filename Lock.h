#pragma once

//////////////////////////////////////////////////////////////////////////
//
//	互斥锁，关键段（线程所有权），跟MUTEX类似
//
//////////////////////////////////////////////////////////////////////////

class CLock
{
public:
	CLock(void);
	~CLock(void);

public:
	void Lock();
	void UnLock();

private:
	/************************************************************************/
	/* 由于将线程切换到等待状态的开销较大，因此为了提高关键段的性能，
	/* Microsoft将旋转锁合并到关键段中，这样EnterCriticalSection()会先用一个旋转锁不断循环
	/* 尝试一段时间才会将线程切换到等待状态,关键段一般配合旋转锁一起用提高性能
	/* 如果是单核CPU，则旋转锁无效
	/************************************************************************/
	CRITICAL_SECTION m_csLock;
};

